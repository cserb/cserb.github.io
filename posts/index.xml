<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on cșerb</title>
    <link>https://cserb.net/posts/</link>
    <description>Recent content in Posts on cșerb</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2019 Cristian Serb</copyright>
    <lastBuildDate>Thu, 31 Oct 2019 13:11:56 +0100</lastBuildDate>
    
	<atom:link href="https://cserb.net/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Build your first blockchain from scratch (#3 Finding the longest chain)</title>
      <link>https://cserb.net/posts/finding-the-longest-chain/</link>
      <pubDate>Thu, 31 Oct 2019 13:11:56 +0100</pubDate>
      
      <guid>https://cserb.net/posts/finding-the-longest-chain/</guid>
      <description>In the previous articles (Probabilistic Finality, DAG) we looked into how Probabilistic Finality works and how DAGs can help to find the longest chain.
Today we are going have a look at implementing a basic DAG in Crystal. We will focus on implementing a DAG::Vertex class and finding the vertex with the longest distance from a given starting vertex. Each vertex will have a unique name and a Hash to represent its edges pointing to its children.</description>
    </item>
    
    <item>
      <title>Build your first blockchain from scratch (#2 DAG) </title>
      <link>https://cserb.net/posts/dag/</link>
      <pubDate>Thu, 31 Oct 2019 13:10:12 +0100</pubDate>
      
      <guid>https://cserb.net/posts/dag/</guid>
      <description>How to use a DAG to find the longest chain 1. Introduction
In the first part #1 we talked about how probabilistic finality works and why it&amp;rsquo;s needed. Also we saw an example of how blocks might be structured and linked to each other:
The data structure above resembles a Directed Acyclic Graph (DAG) and fortunately DAGs allow for an easy way to find the longest chain. This is an important part of achieving probabilistic finality.</description>
    </item>
    
    <item>
      <title>Build your first blockchain from scratch (#1 Probabilistic Finality)</title>
      <link>https://cserb.net/posts/probabilistic-finality/</link>
      <pubDate>Thu, 31 Oct 2019 11:49:12 +0100</pubDate>
      
      <guid>https://cserb.net/posts/probabilistic-finality/</guid>
      <description>This is the first part in a series that will teach you how to build a full featured blockchain from scratch. Introduction I won&amp;rsquo;t be able to cover all aspects in detail, neither is it intended. You should rather make yourself familiar with the high level concept of how a blockchain works. As kind of a reference point you should be familiar with Andreas Antonopoulos&amp;rsquo; book Mastering Bitcoin, which if needed covers quite some detail.</description>
    </item>
    
  </channel>
</rss>